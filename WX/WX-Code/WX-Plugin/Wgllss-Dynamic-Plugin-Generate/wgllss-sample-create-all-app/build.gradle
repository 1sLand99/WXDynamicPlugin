plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace "com.wgllss.dynamic.version.json"

    defaultConfig {
        applicationId "com.wgllss.dynamic.version.json"
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    kapt {
        generateStubs = true
    }
}

dependencies {
    implementation project(path: ':wgllss-sample-create-version-config-annotations')
    kapt project(path: ':wgllss-sample-create-version-config-compiler')
}


def createVersionJson(assembleReleaseTask, buildType) {
    def inputFile = file("${getProject().getBuildDir()}/outputs/apk/vc")
    def outputFile = file("${rootProject.getBuildDir()}/vc")
    if (outputFile.exists()) {
        outputFile.delete()
    }
    tasks.create("assembleCreateAllFile${buildType.capitalize()}", Copy) {
        group = 'other'
        description = "复制json到 指定输出目录"
        from(inputFile.getParent()) {
            include(inputFile.name)
//            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn(assembleReleaseTask.name)
    return assembleReleaseTask
            .dependsOn(assemblecleanJson.name)
            .dependsOn(":wgllss-sample-loader-version:assembleDxCommandAndCopy")
            .dependsOn(":wgllss-sample-loader-version:assembleRelease")

            .dependsOn(":Wgllss-Dynamic-Plugin-RunTime-Apk:assembleCopy")

            .dependsOn(":wgllss-sample-ui-other-lib:assembleDxCommandAndCopy")

            .dependsOn(":wgllss-sample-ui-other2-lib2:assembleDxCommandAndCopy")

            .dependsOn(":wgllss-sample-ui-other2:assembleCopy")
            .dependsOn(":wgllss-sample-ui-other:assembleCopy")

            .dependsOn(":wgllss-sample-ui-loading:assembleDxCommandAndCopy")

            .dependsOn(":wgllss-sample-ui-home:assembleDxCommandAndCopy")

            .dependsOn(":wgllss-sample-assets-source-apk:assembleCopy")
            .dependsOn(":wgllss-sample-skin-resource-apk:assembleCopy")

            .dependsOn(":Wgllss-Dynamic-Plugin-Manager:assembleDxCommandAndCopy")
            .dependsOn(":wgllss-sample-business-library:assembleDxCommandAndCopy")
            .dependsOn(":Wgllss-Dynamic-Plugin-Common-Library:assembleDxCommandAndCopy")
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleRelease") {
        createVersionJson(task, "Release")
    }
//    if (task.name == "cleanJson") {
//        createVersionJson(task, "Release")
//    }
}

task assemblecleanJson(type: Delete) {
    delete buildDir
}


