plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace "com.wgllss.dynamic.version.json"

    defaultConfig {
        applicationId "com.wgllss.dynamic.version.json"
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    kapt {
        generateStubs = true
    }
}

dependencies {
    implementation project(path: ':wgllss-sample-create-version-config-annotations')
    kapt project(path: ':wgllss-sample-create-version-config-compiler')
}


def createVersionJson(assembleReleaseTask, buildType) {
    def inputFile = file("${getProject().getBuildDir()}/outputs/apk/vc")
    def outputFile = file("${rootProject.getBuildDir()}/vc")
    if (outputFile.exists()) {
        outputFile.delete()
    }
    def inputFileJar = file("${project(":wgllss-sample-loader-version").getBuildDir()}/intermediates/aar_main_jar/release/syncReleaseLibJars/classes.jar")
    def outputSrcFile = file("${project(":wgllss-sample-create-version-config-compiler").projectDir}/libs/classes.jar")
    def assembleCopyJarToLibs = tasks.create("assembleCopyJarToLibs") {
        doLast {
            if (outputSrcFile.exists()) {
                outputSrcFile.delete()
            }
            copy {
                from(inputFileJar.getParent()) {
                    include(inputFileJar.name)
                    rename { outputSrcFile.name }
                }
                into(outputSrcFile.getParent())
            }
        }
    }.dependsOn(":wgllss-sample-loader-version:assembleDxCommandAndCopy")
            .dependsOn(":wgllss-sample-loader-version:assembleRelease")

    return tasks.create("assembleCreateVersion2File${buildType.capitalize()}") {
        doLast {
            copy {
                from(inputFile.getParent()) {
                    include(inputFile.name)
                    rename { outputFile.name }
                }
                into(outputFile.getParent())
            }
        }
    }.dependsOn(assembleReleaseTask.name)
            .dependsOn(assembleCopyJarToLibs.name)
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleRelease") {
        createVersionJson(task, "Release")
    }
//    if (task.name == "cleanJson") {
//        createVersionJson(task, "Release")
//    }
}

task assemblecleanJson(type: Delete) {
    delete buildDir
}


