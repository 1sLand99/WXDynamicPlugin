plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly project(path: ':Wgllss-Dynamic-Host-Version-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-Constant-Lib')
}


def createCopyTask(buildType) {
    def workingDirPath = rootProject.ext.workingDirPath
    def outputFile = file("${workingDirPath}classes_version.jar")
    def outputDexFile = file("${workingDirPath}classes_version_dex.jar")
    def lastOutputDexFile = file("${rootProject.getBuildDir()}/classes_version_dex")
    if (lastOutputDexFile.exists()) {
        lastOutputDexFile.delete()
    }
    if (outputDexFile.exists()) {
        outputDexFile.delete()
    }
    if (outputFile.exists()) {
        outputFile.delete()
    }
    def inputFile = file("${getProject().getBuildDir()}/intermediates/aar_main_jar/${buildType}/classes.jar")
    def copyTask = tasks.create("assembleCopy${buildType.capitalize()}", Copy) {
        group = 'other'
        description = "复制${name}到dx环境中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn("assemble${buildType.capitalize()}")
    def assembleDxCommand = tasks.create("assembleDxCommand", Exec) {
        group = 'other'
        description = "${name}到dx执行中..."
        workingDir workingDirPath
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            it.commandLine 'cmd', '/c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        } else {
            it.commandLine 'bash', '-c ', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        }
//        it.commandLine 'cmd', "/c", "d8 --output ${outputDexFile.name} ${outputFile.name}"
    }.dependsOn(copyTask.name)

    return tasks.create("assembleDxCommandAndCopy", Copy) {
        group = 'other'
        description = "复制${name}到项目目录里面."
        from(outputDexFile.getParent()) {
            include(outputDexFile.name)
            rename { lastOutputDexFile.name }
        }
        into(lastOutputDexFile.getParent())
    }.dependsOn(assembleDxCommand.name)
}

tasks.whenTaskAdded { task ->
//    if (task.name == "assembleDebug") {
//        createCopyTask("Debug")
//    }
    if (task.name == "assembleRelease") {
        createCopyTask("Release")
    }
}