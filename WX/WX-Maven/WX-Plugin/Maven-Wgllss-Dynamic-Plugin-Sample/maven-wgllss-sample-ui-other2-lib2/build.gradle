plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.compose.compiler)
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace "com.wgllss.dynamic.sample.other2"

    defaultConfig {
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"
    }
    buildFeatures {
        buildConfig true
        compose = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.7.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    compileOnly project(':Maven-Wgllss-Dynamic-Plugin-Common-Library')
    compileOnly project(':maven-wgllss-common-re-library')
    compileOnly project(':maven-wgllss-business-re-library')
    compileOnly project(':maven-wgllss-sample-business-library')

    compileOnly project(':Maven-Wgllss-Dynamic-Plugin-Manager')
    compileOnly project(':Maven-Wgllss-Dynamic-Plugin-Library')

    compileOnly 'io.github.wgllss:Wgllss-Dynamic-Host-Provider-Lib:1.0.0.3'
    compileOnly 'io.github.wgllss:Wgllss-Dynamic-Host-Download-Lib:1.0.0.5'
    compileOnly 'io.github.wgllss:Wgllss-Dynamic-Host-Lib-Impl:1.0.0.8'
    compileOnly 'io.github.wgllss:Wgllss-Dynamic-Host-Loader-Lib:1.0.0.5'

    compileOnly libs.androidx.core.ktx
    compileOnly libs.appcompat
    compileOnly libs.androidx.recyclerview
    compileOnly libs.google.material
    compileOnly libs.constraintlayout

//    compileOnly libs.androidx.lifecycle.runtime.ktx
    compileOnly libs.androidx.lifecycle.livedata.ktx
    compileOnly libs.androidx.lifecycle.viewmodel.ktx
    compileOnly libs.androidx.activity
    compileOnly libs.androidx.activity.ktx
    compileOnly libs.androidx.fragment.ktx

    compileOnly libs.glide
    compileOnly libs.palette.ktx

    compileOnly libs.org.jsoup.jsoup
    compileOnly libs.exoplayer.core
    compileOnly libs.exoplayer.ui
    compileOnly libs.google.extension.mediasession

    //compose
    compileOnly(libs.androidx.activity.compose)
    compileOnly(platform(libs.androidx.compose.bom))
    compileOnly(libs.androidx.ui)
    compileOnly(libs.androidx.ui.graphics)
    compileOnly(libs.androidx.ui.tooling.preview)
    compileOnly(libs.androidx.material3)
    compileOnly libs.androidx.constraintlayout.compose
    compileOnly libs.androidx.runtime.livedata
    compileOnly libs.coil.compose
    compileOnly libs.androidx.navigation.compose
    compileOnly libs.androidx.navigation.runtime.ktx
    compileOnly libs.androidx.compose.material3.adaptive.navigation
    compileOnly libs.androidx.compose.material3.adaptive
    compileOnly libs.androidx.compose.material3.adaptive.layout
    compileOnly libs.androidx.compose.material3.navigationSuite
    compileOnly libs.androidx.compose.material3.windowSizeClass

}

def commandDex(buildType) {
    def workingDirPath = rootProject.ext.workingDirPath
    def outputFile = file("${workingDirPath}classes_other2.jar")
    def outputDexFile = file("${workingDirPath}classes_other2_dex.jar")
    def lastOutputDexFile = file("${rootProject.getBuildDir()}/classes_other2_dex")
    if (lastOutputDexFile.exists()) {
        lastOutputDexFile.delete()
    }
    if (outputDexFile.exists()) {
        outputDexFile.delete()
    }
    if (outputFile.exists()) {
        outputFile.delete()
    }
    def inputFile = file("${getProject().getBuildDir()}/intermediates/aar_main_jar/${buildType}/sync${buildType}LibJars/classes.jar")
    def copyTask = tasks.create("assembleCopy${buildType.capitalize()}", Copy) {
        group = 'other'
        description = "复制${name}到dx环境中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn("assemble${buildType.capitalize()}")

    def assembleDxCommand = tasks.create("assembleDxCommand", Exec) {
        group = 'other'
        description = "${name}到dx执行中..."
        workingDir workingDirPath
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            it.commandLine 'cmd', '/c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        } else {
            it.commandLine 'bash', '-c ', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        }
//        it.commandLine 'cmd', "/c", "d8 --output ${outputDexFile.name} ${outputFile.name}"
    }.dependsOn(copyTask.name)

    return tasks.create("assembleDxCommandAndCopy") {
        doLast {
            copy {
                from(outputDexFile.getParent()) {
                    include(outputDexFile.name)
                    rename { lastOutputDexFile.name }
                }
                into(lastOutputDexFile.getParent())
            }
        }
    }.dependsOn(assembleDxCommand.name)
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleRelease") {
        commandDex("Release")
    }
//    if (task.name == "assembleDxCommand") {
//        assembleCopyToHost.dependsOn assembleDxCommand
//    }
}
